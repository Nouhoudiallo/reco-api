{"version":3,"sources":["../index.ts","../src/lib/prisma.ts"],"sourcesContent":["import express from \"express\";\nimport bcrypt from \"bcrypt\";\nimport prisma from \"@/lib/prisma\";\n\nconst app = express();\nconst port = 3000;\n\n// Ajoutez ce middleware pour analyser les requêtes JSON\napp.use(express.json());\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello, world!\");\n});\n\napp.post(\"/api/login\", async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      res.json({\n        message: \"le champs email ou password ne doivent pas être vide\",\n      });\n      return;\n    }\n\n    const verify = await prisma.user.findFirst({\n      where: {\n        email: email,\n      },\n    });\n\n    if (!verify) {\n      res.json({\n        message: \"l'utilisateur n'existe pas\",\n      });\n      return;\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, verify.password);\n\n    if (!isPasswordValid) {\n      res.json({\n        message: \"le mot de passe est incorrect\",\n      });\n      return;\n    }\n\n    res.json({\n      message: \"connexion réussie\",\n      user: {\n        id: verify.id,\n        email: verify.email,\n      },\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: `une erreur est survenue lors de la request, ${error}`,\n    });\n  }\n});\n\napp.post(\"/api/register\", async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      res.json({\n        message: \"le champs email ou password ne doivent pas être vide\",\n      });\n      return;\n    }\n\n    const verifyUser = await prisma.user.findFirst({\n      where: {\n        email,\n      },\n    });\n\n    if (verifyUser) {\n      res.json({\n        message: \"cette addresse email est déjà utiliser\",\n      });\n      return;\n    }\n\n    const hashPassword = await bcrypt.hashSync(password, 16);\n\n    const inserUser = await prisma.user.create({\n      data: {\n        email,\n        password: hashPassword,\n      },\n    });\n\n    if (!inserUser) {\n      res.json({\n        message: \"une erreur est survenue lors de la création de l'utilisateur\",\n      });\n      return;\n    }\n\n    res.status(200).json({\n      message: \"utilisateur créer avec succès\",\n      user: inserUser,\n    });\n    return;\n  } catch (error) {\n    res.status(500).json({\n      message: `une erreur est survenue lors de la request: ${error}`,\n      erreur: error,\n    });\n    return;\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n","import { PrismaClient } from \"@prisma/client\";\n\n// add prisma to the NodeJS global types to\n// prevent multiple instances of prisma client\n// get created by hot-reloading in development\ndeclare global {\n  var prisma: PrismaClient;\n}\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV === \"development\") {\n  global.prisma = prisma;\n}\n\nexport default prisma;\n"],"mappings":";AAAA,OAAO,aAAa;AACpB,OAAO,YAAY;;;ACDnB,SAAS,oBAAoB;AAS7B,IAAM,SAAS,OAAO,UAAU,IAAI,aAAa;AAEjD,IAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,SAAO,SAAS;AAClB;AAEA,IAAO,iBAAQ;;;ADXf,IAAM,MAAM,QAAQ;AACpB,IAAM,OAAO;AAGb,IAAI,IAAI,QAAQ,KAAK,CAAC;AAEtB,IAAI,IAAI,KAAK,CAAC,KAAK,QAAQ;AACzB,MAAI,KAAK,eAAe;AAC1B,CAAC;AAED,IAAI,KAAK,cAAc,OAAO,KAAK,QAAQ;AACzC,MAAI;AACF,UAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAEhC,QAAI,CAAC,SAAS,CAAC,UAAU;AACvB,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,eAAO,KAAK,UAAU;AAAA,MACzC,OAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,CAAC,QAAQ;AACX,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,UAAM,kBAAkB,MAAM,OAAO,QAAQ,UAAU,OAAO,QAAQ;AAEtE,QAAI,CAAC,iBAAiB;AACpB,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,IAAI,OAAO;AAAA,QACX,OAAO,OAAO;AAAA,MAChB;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS,+CAA+C,KAAK;AAAA,IAC/D,CAAC;AAAA,EACH;AACF,CAAC;AAED,IAAI,KAAK,iBAAiB,OAAO,KAAK,QAAQ;AAC5C,MAAI;AACF,UAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAEhC,QAAI,CAAC,SAAS,CAAC,UAAU;AACvB,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,UAAM,aAAa,MAAM,eAAO,KAAK,UAAU;AAAA,MAC7C,OAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,YAAY;AACd,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,UAAM,eAAe,MAAM,OAAO,SAAS,UAAU,EAAE;AAEvD,UAAM,YAAY,MAAM,eAAO,KAAK,OAAO;AAAA,MACzC,MAAM;AAAA,QACJ;AAAA,QACA,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAED,QAAI,CAAC,WAAW;AACd,UAAI,KAAK;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAEA,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AACD;AAAA,EACF,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,SAAS,+CAA+C,KAAK;AAAA,MAC7D,QAAQ;AAAA,IACV,CAAC;AACD;AAAA,EACF;AACF,CAAC;AAED,IAAI,OAAO,MAAM,MAAM;AACrB,UAAQ,IAAI,yCAAyC,IAAI,EAAE;AAC7D,CAAC;","names":[]}